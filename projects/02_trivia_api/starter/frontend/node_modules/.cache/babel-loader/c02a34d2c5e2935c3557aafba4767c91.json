{"ast":null,"code":"var _jsxFileName = \"/Users/hlin/Documents/GitHub/Full-Stack/projects/02_trivia_api/starter/frontend/src/components/QuizView.js\";\nimport React, { Component } from \"react\";\nimport $ from \"jquery\";\nimport \"../stylesheets/QuizView.css\";\nconst questionsPerPlay = 4;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: \"/quizzes\",\n        type: \"POST\",\n        dataType: \"json\",\n        contentType: \"application/json\",\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: \"\",\n            forceEnd: result.question ? false : true\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: \"\",\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(\" \");\n      return answerArray.includes(formatGuess);\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/categories\",\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n        return;\n      },\n      error: error => {\n        alert(\"Unable to load categories. Please try your request again\");\n        return;\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"ALL\"), Object.keys(this.state.categories).map(id => {\n      id = parseInt(id) + 1; // start div value at 1\n\n      return React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[parseInt(id) - 1],\n          id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, this.state.categories[parseInt(id) - 1]);\n    })));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \" \", \"Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \" \", \"Play Again?\", \" \"));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? \"correct\" : \"wrong\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \" \", \"Next Question\", \" \"));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["/Users/hlin/Documents/GitHub/Full-Stack/projects/02_trivia_api/starter/frontend/src/components/QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","selectCategory","type","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","ajax","url","dataType","contentType","data","JSON","stringify","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","success","result","showAnswer","question","guess","forceEnd","error","alert","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","includes","categories","componentDidMount","renderPrePlay","Object","keys","map","parseInt","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport $ from \"jquery\";\n\nimport \"../stylesheets/QuizView.css\";\n\nconst questionsPerPlay = 4;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        categories: {},\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n    }\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: `/categories`,\n      type: \"GET\",\n      success: result => {\n        this.setState({ categories: result.categories });\n        return;\n      },\n      error: error => {\n        alert(\"Unable to load categories. Please try your request again\");\n        return;\n      }\n    });\n  }\n\n  selectCategory = ({ type, id = 0 }) => {\n    this.setState({ quizCategory: { type, id } }, this.getNextQuestion)\n  }\n\n  handleChange = event => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if (this.state.currentQuestion.id) {\n      previousQuestions.push(this.state.currentQuestion.id)\n    }\n\n    $.ajax({\n      url: \"/quizzes\",\n      type: \"POST\",\n      dataType: \"json\",\n      contentType: \"application/json\",\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: result => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: \"\",\n          forceEnd: result.question ? false : true\n        })\n        return;\n      },\n      error: error => {\n        alert('Unable to load question. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitGuess = event => {\n    event.preventDefault();\n    const formatGuess = this.state.guess\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\")\n      .toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: \"\",\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay() {\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"choose-header\">Choose Category</div>\n        <div className=\"category-holder\">\n          <div className=\"play-category\" onClick={this.selectCategory}>\n            ALL\n          </div>\n          {Object.keys(this.state.categories).map(id => {\n            id = parseInt(id) + 1;        // start div value at 1\n            return (\n              <div\n                key={id}\n                value={id}\n                className=\"play-category\"\n                onClick={() =>\n                  this.selectCategory({ type: this.state.categories[parseInt(id) - 1], id })\n                }\n              >\n                {this.state.categories[parseInt(id) - 1]}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  renderFinalScore() {\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\">\n          {\" \"}\n          Your Final Score is {this.state.numCorrect}\n        </div>\n        <div className=\"play-again button\" onClick={this.restartGame}>\n          {\" \"}\n          Play Again?{\" \"}\n        </div>\n      </div>\n    );\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\")\n      .toLowerCase();\n    const answerArray = this.state.currentQuestion.answer\n      .toLowerCase()\n      .split(\" \");\n    return answerArray.includes(formatGuess);\n  };\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess\n      .replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\")\n      .toLowerCase();\n    let evaluate = this.evaluateAnswer();\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">\n          {this.state.currentQuestion.question}\n        </div>\n        <div className={`${evaluate ? \"correct\" : \"wrong\"}`}>\n          {evaluate ? \"You were correct!\" : \"You were incorrect\"}\n        </div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}>\n          {\" \"}\n          Next Question{\" \"}\n        </div>\n      </div>\n    )\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay ||\n      this.state.forceEnd ? (\n        this.renderFinalScore()\n      ) : this.state.showAnswer ? (\n        this.renderCorrectAnswer()\n      ) : (\n          <div className=\"quiz-play-holder\">\n            <div className=\"quiz-question\">\n              {this.state.currentQuestion.question}\n            </div>\n            <form onSubmit={this.submitGuess}>\n              <input type=\"text\" name=\"guess\" onChange={this.handleChange} />\n              <input\n                className=\"submit-guess button\"\n                type=\"submit\"\n                value=\"Submit Answer\"\n              />\n            </form>\n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n        ? this.renderPlay()\n        : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}